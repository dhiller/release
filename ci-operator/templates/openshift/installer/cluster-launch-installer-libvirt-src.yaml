kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_FORMAT
  required: true
- name: IMAGE_LIBVIRT_INSTALLER
  required: true
- name: LOCAL_IMAGE_SRC
  required: true
- name: IMAGE_TESTS
  required: true
- name: CLUSTER_TYPE
  value: "gcp"
- name: TEST_COMMAND
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: BUILD_ID
  required: false

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated
  - kind: SystemGroup
    name: system:authenticated

# Give admin access to a known bot
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-namespace-admins
    namespace: ${NAMESPACE}
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    namespace: ci
    name: ci-chat-bot

# The e2e pod spins up a cluster, runs e2e tests, and then cleans up the cluster.
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "setup,test,teardown"
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 18000
    terminationGracePeriodSeconds: 900
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-profile
      secret:
        secretName: ${JOB_NAME_SAFE}-cluster-profile
    initContainers:
    - name: openshift-tests
      image: ${IMAGE_TESTS}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - /usr/bin/openshift-tests
      - /tmp/shared/openshift-tests

    - name: kubevirt-src
      image: ${LOCAL_IMAGE_SRC}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - -R
      - /go/src/kubevirt.io/kubevirt
      - /tmp/shared/kubevirt

    containers:

    # Once the cluster is up, executes shared tests
    - name: test
      image: ${IMAGE_LIBVIRT_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /home/packer
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel-ci
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-c
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: GCP_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster/gce.json
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/sh
        set -euo pipefail
        trap 'touch "${HOME}"/exit' EXIT
        trap 'kill $(jobs -p); exit 0' TERM
        set -x
        export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SHARED_CREDENTIALS_FILE}"
        [ -d "${HOME}"/.ssh ] || mkdir -p ~/.ssh

        mock-nss.sh
        gcloud auth activate-service-account --key-file="${GCP_SHARED_CREDENTIALS_FILE}"
        gcloud --quiet config set project openshift-gce-devel-ci
        gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"
        set +x

        SETUP_SUCCESS=
        while true; do
          if [[ -f "${HOME}"/exit ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ ! -f "${HOME}"/setup-success ]]; then
            sleep 15 & wait
            continue
          elif [[ -z "${SETUP_SUCCESS}" ]]; then
            echo "Setup success"
            SETUP_SUCCESS=1
          fi
          break
        done
        set -x
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          packer@"${INSTANCE_PREFIX}" \
          --command 'export KUBECONFIG=/home/packer/clusters/installer/auth/kubeconfig && /home/packer/run-tests.sh'

    # Runs an install
    - name: setup
      image: ${IMAGE_LIBVIRT_INSTALLER}
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /home/packer
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel-ci
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-c
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/sh
        set -euo pipefail
        trap 'rc=$?; if test "${rc}" -eq 0; then touch "${HOME}"/setup-success; else touch "${HOME}"/exit; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM
        cat  > "${HOME}"/kubevirt-tests.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        echo "installing docker"
        sudo yum install -y docker
        sudo systemctl start docker
        echo "fetching oc and kubectl for deployment"
        export oc_filename='oc.tar.gz'
        export oc_dirname="${oc_filename%.tar.gz}"
        export oc_download_url_base='https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.2/linux/'
        (
          mkdir ${oc_dirname}
          cd ${oc_dirname}
          curl -L -O -o ${oc_filename} ${oc_download_url_base}/${oc_filename}
          tar zxvf ${oc_filename}
          ln -s $(pwd)/${oc_dirname} kubectl
        ) || ( echo "failed to download ${oc_filename}"; exit 1 )
        export PATH=$(pwd)/${oc_dirname}:$PATH
        export KUBECONFIG=/home/packer/clusters/installer/auth/kubeconfig
        which kubectl
        which oc
        echo "checking nodes for cluster"
        oc get nodes
        echo "checking configuration"
        env|grep KUBE
        kubectl config view
        export DOCKER_PREFIX='dhiller'
        export DOCKER_TAG="latest"
        export KUBEVIRT_PROVIDER=external
        export GIMME_GO_VERSION=1.12.8
        export GOPATH="/go"
        export GOBIN="/usr/bin"
        sudo mkdir -p /gimme
        sudo chmod 777 /gimme
        sudo chmod 777 /etc/profile.d
        sudo curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | HOME=/gimme GIMME_GO_VERSION=1.12.8 bash >> /etc/profile.d/gimme.sh
        source /etc/profile.d/gimme.sh
        echo "creating manifests"
        sudo bash -x ./hack/build-manifests.sh
        echo "checking configuration location" 
        echo "KUBECONFIG: ${KUBECONFIG}"
        echo "patching cluster-up external provider"
        (
          cd cluster-up/cluster/external
          curl -L -O -o provider.sh https://raw.githubusercontent.com/dhiller/kubevirtci/fix-external-provider/cluster-up/cluster/external/provider.sh
        )
        echo "calling cluster-up to prepare config and check whether cluster is reachable"
        bash -x ./cluster-up/up.sh echo "checking cluster configuration after config prep"
        kubectl config view
        echo "deploying"
        bash -x ./hack/cluster-deploy.sh
        echo "checking pods for kubevirt"
        oc get pods -n kubevirt
        echo "testing"
        go get -u github.com/onsi/ginkgo/ginkgo
        bash -x ./hack/build-func-tests.sh
        bash -x ./hack/functests.sh
        EOF
        chmod +x "${HOME}"/kubevirt-tests.sh
        cat  > "${HOME}"/run-tests.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        export PATH=/home/packer:$PATH
        mkdir -p /tmp/artifacts/junit

        function run-tests() {
          cd kubevirt
          "${HOME}"/kubevirt/kubevirt-tests.sh 
          return 0
        }

        ${TEST_COMMAND}
        EOF
        chmod +x "${HOME}"/run-tests.sh
        mock-nss.sh
        [ -d "${HOME}"/.ssh ] || mkdir "${HOME}"/.ssh
        gcloud auth activate-service-account \
          --quiet --key-file /tmp/cluster/gce.json
        gcloud --quiet config set project "${GOOGLE_PROJECT_ID}"
        gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"
        set -x

        # image-family openshift4-libvirt must exist in ${GOOGLE_COMPUTE_ZONE} for this template
        # to create the image-family see here: https://github.com/ironcladlou/openshift4-libvirt-gcp#images
        gcloud compute instances create "${INSTANCE_PREFIX}" \
          --image-family openshift4-libvirt \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --machine-type n1-standard-8 \
          --min-cpu-platform "Intel Haswell" \
          --boot-disk-type pd-ssd \
          --boot-disk-size 256GB \
          --metadata-from-file openshift-pull-secret=/tmp/cluster/pull-secret
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse /home/packer/kubevirt packer@"${INSTANCE_PREFIX}":~/
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/kubevirt-tests.sh packer@"${INSTANCE_PREFIX}":~/kubevirt/kubevirt-tests.sh
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/run-tests.sh packer@"${INSTANCE_PREFIX}":~/run-tests.sh
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/openshift-tests packer@"${INSTANCE_PREFIX}":~/openshift-tests
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse /bin/openshift-install packer@"${INSTANCE_PREFIX}":/home/packer/openshift-install
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          packer@"${INSTANCE_PREFIX}" \
          --command 'sudo mv /home/packer/openshift-install /usr/local/bin/openshift-install'
        set +x
        echo 'Will now launch libvirt cluster in the gce instance with "${RELEASE_IMAGE_LATEST}"'
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          packer@"${INSTANCE_PREFIX}" \
          --command 'export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_LATEST}" OPENSHIFT_INSTALL_INVOKER=openshift-internal-ci/${JOB_NAME_SAFE}/${BUILD_ID} && timeout 4800 bash -ce "create-cluster installer"'

   # Performs cleanup of all created resources and upload the artifacts
    - name: teardown
      image: ${IMAGE_LIBVIRT_INSTALLER}
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /home/packer
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel-ci
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-c
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        function teardown() {
          # This is for running the gcloud commands
          mock-nss.sh
          gcloud auth activate-service-account \
            --quiet --key-file /tmp/cluster/gce.json
          gcloud --quiet config set project "${GOOGLE_PROJECT_ID}"
          gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"

          set -x
          set +e
          echo 'Collect all the info about clusteroperators'
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
            --zone "${GOOGLE_COMPUTE_ZONE}" \
            packer@"${INSTANCE_PREFIX}" \
            --command 'export KUBECONFIG=/home/$USER/clusters/installer/auth/kubeconfig && bash -ce "oc get co"' | tee /tmp/artifacts/output-co-libvirt
          echo 'Run must gather on the cluster'
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
            --zone "${GOOGLE_COMPUTE_ZONE}" \
            packer@"${INSTANCE_PREFIX}" \
            --command 'mkdir -p $HOME/must-gather && export KUBECONFIG=$HOME/clusters/installer/auth/kubeconfig && bash -ce "oc adm must-gather --dest-dir $HOME/must-gather || true"'
          echo "scp everything related to installer back to pod"
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
            --quiet \
            --project "${GOOGLE_PROJECT_ID}" \
            --zone "${GOOGLE_COMPUTE_ZONE}" \
            --recurse packer@"${INSTANCE_PREFIX}":$HOME/clusters/installer /tmp/artifacts
          echo "scp must-gather logs back to pod"
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
            --quiet \
            --project "${GOOGLE_PROJECT_ID}" \
            --zone "${GOOGLE_COMPUTE_ZONE}" \
            --recurse packer@"${INSTANCE_PREFIX}":$HOME/must-gather /tmp/artifacts
          echo "scp junit logs back to test pod"
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
            --quiet \
            --project "${GOOGLE_PROJECT_ID}" \
            --zone "${GOOGLE_COMPUTE_ZONE}" \
            --recurse packer@"${INSTANCE_PREFIX}":/tmp/artifacts/junit /tmp/artifacts

          touch /home/packer/exit
          echo "Deprovisioning cluster ..."
          gcloud compute instances delete "${INSTANCE_PREFIX}" --quiet
        }

        trap 'teardown' EXIT
        trap 'kill $(jobs -p); exit 0' TERM

        for i in `seq 1 180`; do
          if [[ -f /home/packer/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done
